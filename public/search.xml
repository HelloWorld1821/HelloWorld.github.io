<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux下cpp开发</title>
      <link href="/2025/01/08/Linux%E4%B8%8Bcpp%E5%BC%80%E5%8F%91/"/>
      <url>/2025/01/08/Linux%E4%B8%8Bcpp%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; margin-bottom: 35px;">  <b><i>"C++ is not just a programming language, it's a philosophy of design."</i></b></div><span id="more"></span><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>linux环境在虚拟机上搭建，我使用的是VMware Workstation 17 Pro，Ubuntu版本为20.04.6桌面版。<br>1.&nbsp;&nbsp;安装g++</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++</span><br></pre></td></tr></table></figure><p>2.&nbsp;&nbsp;安装vim</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>3.&nbsp;&nbsp;安装中文输入法(这里采用google拼音)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fcitx-googlepinyin</span><br></pre></td></tr></table></figure><p style="margin-bottom: 0px;"><b>注意安装完后还得去设置里的"Region&Language"将刚安装的语言包添加进去，并且Linux中切换中英文输入法的快捷键为：win+space。</b></p>4.&nbsp;&nbsp;安装vscode(考虑到vim编辑代码不方便)，在官网选择Ubuntu系统对应的版本后下载安装包，接着使用命令行安装：<p style="margin-bottom: 20px;"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i code_1.96.2-1734607745_amd64.deb</span><br></pre></td></tr></table></figure>接着在vscode界面里安装C/C++扩展，并选用g++作为编译器。<h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="编译-compile"><a href="#编译-compile" class="headerlink" title="编译(compile)"></a>编译(compile)</h2><p>将便于人编写、阅读、维护的高级计算机语言所写作的源代码程序，翻译为计算机能解读、运行的低阶机器语言的程序也即可执行文件，这个过程就是编译，执行这个工作的就是编译器(compiler)。我们把需要编译这个过程的称为编译型语言，典型的就是C/C++、Rust等，另外一种不需要的称为解释型语言，典型的就是Python，由于Python每次运行时都要被解释器逐行解析和执行，所以相较于提前编译好的C/C++程序运行会慢一些。例如以下命令行就是编译一个名为HelloWorld的cpp文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ HelloWorld.cpp</span><br></pre></td></tr></table></figure><p>不过这样编译出来的可执行文件会被命名为默认值a.out，要想自定义使用<code>-o</code>参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o HelloWorld HelloWorld.cpp</span><br></pre></td></tr></table></figure><p>也可以这样使用，取决于个人的使用习惯，我倾向于后一种，因为将代码文件与编译后的可执行文件名隔开了看着顺眼一些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ HelloWorld.cpp -o HelloWorld</span><br></pre></td></tr></table></figure><h2 id="make和makefile"><a href="#make和makefile" class="headerlink" title="make和makefile"></a>make和makefile</h2><p>makefile是一个文本文件，包含了一组规则，定义了如何从源代码文件(通常是.c、.cpp、.h 文件等)构建最终的可执行文件或库。而make是一个构建工具，它会根据makefile中定义的规则来决定哪些部分的代码需要重新编译，以及如何执行这些编译和链接任务。通过使用make和makefile，可以有效地管理大型项目，避免重复编译和手动操作，极大提高开发效率。makefile的基本结构为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">target: dependencies</span></span><br><span class="line">    command</span><br></pre></td></tr></table></figure><p>其中target是目标文件或规则的名称，dependencies是目标依赖的文件(如源代码文件、头文件)，command是在目标更新时执行的命令。例如：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编译目标，默认目标</span></span><br><span class="line"><span class="section">HelloWorld: HelloWorld.cpp</span></span><br><span class="line">    g++ HelloWorld.cpp -o HelloWorld</span><br><span class="line"></span><br><span class="line"><span class="comment">#清理目标</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm -f HelloWorld</span><br></pre></td></tr></table></figure><p>使用<code>make</code>命令时会默认选择第一个目标，如果要构建其它目标，需要显示指明就像：<code>make clean</code>，这样就会执行清理命令。<br>make会自动识别名为“makefile”的文件并执行，如果makefile文件是其它名称，需要使用<code>-f</code>参数指定(这里makefile的文件名为“mf”)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -f mf</span><br></pre></td></tr></table></figure><p style="margin-bottom: 0px;"><b>注意书写makefile时command要使用Tab键缩进而不能使用空格，在不同的编辑器里Tab键对应的空格数量是不同的。例如：</b></p>vscode<img src="/imgs/Linux下cpp开发/vscode.png" style="width: 100%; height: auto;"></img>vim<img src="/imgs/Linux下cpp开发/vim.png" style="width: 100%; height: auto;"></img><h2 id="cmake和CMakeLists"><a href="#cmake和CMakeLists" class="headerlink" title="cmake和CMakeLists"></a>cmake和CMakeLists</h2><p>cmake是一个跨平台的自动化构建系统，它能够生成用于编译、构建、测试和安装软件的标准化构建文件(如makefile)。CMakeLists是cmake使用的构建配置文件，通过它来定义项目的构建规则、依赖关系和其他设置。相较于直接用make，cmake可以生成适用于不同平台和工具链的makefile文件，更为灵活，并且自动化程度更高，简化了构建过程，减少了手动干预的需求，这使得cmake成为目前广泛使用的编译工具。CMakeLists包含了一系列cmake指令，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#声明要求的cmake最低版本</span><br><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line">#声明项目名称</span><br><span class="line"><span class="built_in">project</span>(HelloWorld)</span><br><span class="line">#添加可执行程序</span><br><span class="line">#语法：<span class="built_in">add_executable</span>(程序名 源代码文件)</span><br><span class="line"><span class="built_in">add_executable</span>(HelloWorld HelloWorld.cpp)</span><br></pre></td></tr></table></figure><p>一个常见的使用cmake做法为：在项目工程根目录新建build文件夹再进行编译，这样产生的中间文件就会生成在build文件夹中，与源代码分开。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="源文件-source-file-和头文件-header-file"><a href="#源文件-source-file-和头文件-header-file" class="headerlink" title="源文件(source file)和头文件(header file)"></a>源文件(source file)和头文件(header file)</h2><p>源文件是编译的核心部分，通常是包含程序的主体逻辑、函数实现、类方法定义等具体实现的文件，具有.c（C）或.cpp（C++）的扩展名，带有main函数的源文件会被编译成可执行程序，其他的则会编译成库文件。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//printHello.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printHello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个代码文件就会被编译成库文件，因为它不带main函数。<br>头文件一般包含函数的声明、宏定义、常量、结构体定义、类声明等，以便编译器能够知道函数、变量和类的存在，具有.h的扩展名(C++也可以使用.hpp作为扩展名)，通常不包含函数的实际实现。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//printHello.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PRINTHELLO_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTHELLO_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>最后我们如果想在主函数中调用这个函数的话，就可以这么写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;printHello.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printHello</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="margin-bottom: 0px;"><b>这里注意引用个人定义头文件用""，而引用标准库头文件用<>。只有使用引号才会从当前文件夹寻找，否则就会去系统配置的库环境中去寻找。</b></p><h2 id="项目整合"><a href="#项目整合" class="headerlink" title="项目整合"></a>项目整合</h2><p>有了以上的基本概念，我们就可以针对包含printHello.cpp、printHello.h和main.cpp的简单项目进行编译了。首先尝试一下makefile:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">Hello: main.cpp printHello.cpp</span></span><br><span class="line">    g++ main.cpp printHello.cpp -o Hello</span><br></pre></td></tr></table></figure><p>运行成功！<br><img src="/imgs/Linux下cpp开发/makefile.png" style="width: 100%; height: auto;"></img></p><p>接着尝试一下cmake:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>)</span><br><span class="line"><span class="built_in">project</span>(Hello)</span><br><span class="line">#添加库</span><br><span class="line"><span class="built_in">add_library</span>(printHello printHello.cpp)</span><br><span class="line">#添加可执行文件</span><br><span class="line"><span class="built_in">add_executable</span>(Hello main.cpp)</span><br><span class="line">#链接库</span><br><span class="line"><span class="built_in">target_link_libraries</span>(Hello printHello)</span><br></pre></td></tr></table></figure><p>同样运行成功！<br><img src="/imgs/Linux下cpp开发/cmake.png" style="width: 100%; height: auto;"></img></p><p>至此，我们已经具备编写c++项目的基础能力了。</p>]]></content>
      
      
      <categories>
          
          <category> cpp开发 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Start</title>
      <link href="/2025/01/07/Start/"/>
      <url>/2025/01/07/Start/</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; margin-bottom: 35px;">  <b><i>"There is no royal road to learning."</i></b></div><p style="text-align: center;">当你看到这句话时说明博客已经成功搭建，合抱之木，生于毫末；九层之台，起于累土，旅途就从这里开始吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
